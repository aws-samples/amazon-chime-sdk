<<<<<<< HEAD
AWSTemplateFormatVersion: "2010-09-09"
=======
AWSTemplateFormatVersion: '2010-09-09'
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
Transform: "AWS::Serverless-2016-10-31"
Description: AWS CloudFormation stack to set up infrastructure required for the Amazon Chime SDK chat demo app
Parameters:
  DemoName:
    Type: String
    Default: ChimeSDKTelevisitDemo
    Description: Unique Name for Demo Resources
  ChimeAppInstanceArn:
<<<<<<< HEAD
    Type: String
    Default: arn:aws:chime:us-east-1:<accountid>:app-instance/<isntanceid>
    Description: Existing Chime AppInstanceArn
  LexBotName:
    Type: String
    Default: PatientAppointmentDemoBot
    Description: The name of Lex chatbot for Chime SDK messaging interaction
  LexBotAlias:
    Type: String
    Default: demo
    Description: The alias of Lex chatbot for Chime SDK messaging interaction

=======
    Type: String 
    Default: arn:aws:chime:us-east-1:<accountid>:app-instance/<isntanceid>
    Description: Existing Chime AppInstanceArn
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
Resources:
  #Layer for the latest AWS SDK with Amazon Chime SDK for messaging
  AWSSDKChimeLayer:
    Type: AWS::Serverless::LayerVersion
    Description: The AWS SDK with support for Amazon Chime SDK media capture feature.
    Metadata:
      BuildMethod: nodejs12.x
    Properties:
      LayerName: aws-chime-sdk-layer
      Description: Dependencies Layer
      ContentUri: dependencies/
      CompatibleRuntimes:
        - nodejs12.x

  # service linked role for live transcription
  ChimeServiceLinkedRole:
    Type: AWS::IAM::ServiceLinkedRole
<<<<<<< HEAD
    Properties:
=======
    Properties: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
      AWSServiceName: transcription.chime.amazonaws.com
      Description: service linked role for live transcription

  #Lambda that creates AWS Chime App instance
  ChimeAppInstanceLambda:
    Type: "AWS::Lambda::Function"
<<<<<<< HEAD
    DependsOn:
=======
    DependsOn: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
      - KinesisStream
    Properties:
      Handler: "index.handler"
      Role: !GetAtt LambdaExecuteRole.Arn
      Runtime: "nodejs12.x"
      Timeout: 60
      ReservedConcurrentExecutions: 30
<<<<<<< HEAD
      Layers:
=======
      Layers: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
        - !Ref AWSSDKChimeLayer
      Environment:
        Variables:
          AppInstanceArn: !Ref ChimeAppInstanceArn
      Code:
        ZipFile: >
          "use strict";
          const AWS = require("aws-sdk");
          const { v4: uuidv4 } = require('uuid');
          var response = require("cfn-response"); 
          AWS.config.update({ region: process.env.AWS_REGION });
          const chime = new AWS.Chime({ region: process.env.AWS_REGION });
          var chime_response; 
          var dateNow = new Date();

          exports.handler = async (event, context, callback) => {
            console.log("Event: \n", event);
            function sleep(ms) {
              return new Promise(resolve => setTimeout(resolve, ms));
            }
            if (event["RequestType"] === "Create") {
              console.log("Create Chime SDK App Instance");
              var params = {
                Name: `AWSChimeMessagingSDKDemo-${uuidv4()}`,
              };
              try {
                chime_response = await chime.createAppInstance(
                  params,
                  function (err, data) {
                    if (err) console.log(err, err.stack);
                    // an error occurred
                    else {
                      console.log(data); // successful response
                      return data;
                    }
                  }
                ).promise();
              } catch (error) {
                console.log("ERROR CAUGHT \n", error);
                await response.send(event, context, response.FAILED, {});
              }
            } else {
              console.log("Update Chime SDK App Instance");
              chime_response = {"AppInstanceArn": process.env.AppInstanceArn};
            }

            //Create AppInstanceAdmin
            try {
              var createUserParams = {
                AppInstanceArn: chime_response.AppInstanceArn, /* required */
                AppInstanceUserId: "ModeratorBot", /* required */
                ClientRequestToken: dateNow.getHours().toString() + dateNow.getMinutes().toString(), /* required */
                Name: "ModeratorBot", /* required */
              };
              await chime.createAppInstanceUser(
                createUserParams,
                function (err, data) {
                  if (err) console.log(err, err.stack); // an error occurred
                  else {
                    console.log(data);           // successful response
                    chime_response.adminUserArn = data.AppInstanceUserArn;
                  }
                }
              ).promise();
              var createAdminParams = {
                AppInstanceAdminArn: chime_response.adminUserArn, /* required */
                AppInstanceArn: chime_response.AppInstanceArn /* required */
              };
              await chime.createAppInstanceAdmin(
                createAdminParams,
                function (err, data) {
                  if (err) console.log(err, err.stack); // an error occurred
                  else {
                    console.log(data);           // successful response
                  }
                }
              ).promise();
            } catch (error) {
              console.log("ERROR CAUGHT \n", error);
              await response.send(event, context, response.FAILED, {});
            }

            //Configure data streaming feature
            async function putStreamConfig(maxAttempts, retryTimeout) {
              if (maxAttempts > 0) {
                try {
                  await sleep(retryTimeout);
                  var streaminConfigurationParams = {
                    AppInstanceArn: chime_response.AppInstanceArn, /* required */
                    AppInstanceStreamingConfigurations: [ /* required */
                      {
                        AppInstanceDataType: "ChannelMessage", /* required */
                        ResourceArn: event.ResourceProperties.KinesisStreamArn /* required */
                      },
                      /* more items */
                    ]
                  };
                  await chime.putAppInstanceStreamingConfigurations(
                    streaminConfigurationParams,
                    function (err, data) {
                      if (err) console.log(err, err.stack); // an error occurred
                      else {
                        console.log(data);           // successful response
                      }
                    }
                  ).promise();
                } catch (error) {
                    console.log("ERROR CAUGHT \n", error);
                    await putStreamConfig(maxAttempts - 1, retryTimeout);
                }
              } else {
                  console.log("Max retry reached.");
                  await response.send(event, context, response.FAILED, {});
              }
            }
            await putStreamConfig(30, 10000);
            await response.send(event, context, response.SUCCESS, chime_response);
          };

  KinesisStream:
    Type: "AWS::Kinesis::Stream"
    Properties:
      Name: !Sub chime-messaging-${DemoName}-DataStream
      RetentionPeriodHours: 24
<<<<<<< HEAD
      StreamEncryption:
=======
      StreamEncryption: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
        EncryptionType: "KMS"
        KeyId: "alias/aws/kinesis"
      ShardCount: 2

  # Trigger Lambda function to create Amazon Chime App Instance creation
  TriggerChimeAppInstanceLambda:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - "ChimeAppInstanceLambda"
<<<<<<< HEAD
    Properties:
=======
    Properties: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
      ServiceToken: !GetAtt ChimeAppInstanceLambda.Arn
      KinesisStreamArn: !GetAtt KinesisStream.Arn

  MessageModerator:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Lambda for auto-moderation of Chime messaging channels"
      Role: !GetAtt LambdaKinesisRole.Arn
      FunctionName: !Sub ${DemoName}-MessageModerator
      CodeUri: messagemoderator/
      Handler: index.handler
      MemorySize: 128
      Runtime: nodejs12.x
      Timeout: 30
      ReservedConcurrentExecutions: 30
<<<<<<< HEAD
      Environment:
        Variables:
          CHIME_APP_INSTANCE_ADMIN_ROLE_ARN: !GetAtt LambdaKinesisRole.Arn
          CHIME_APP_INSTANCE_ARN: !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn
          LEX_BOT_NAME: !Ref LexBotName
          LEX_BOT_ALIAS: !Ref LexBotAlias
=======
      Environment: 
        Variables: 
          CHIME_APP_INSTANCE_ADMIN_ROLE_ARN: !GetAtt LambdaKinesisRole.Arn
          CHIME_APP_INSTANCE_ARN: !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
      Events:
        ApiEvent:
          Type: Kinesis
          Properties:
            Stream: !GetAtt KinesisStream.Arn
<<<<<<< HEAD
            StartingPosition: "LATEST"
=======
            StartingPosition: 'LATEST'
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
            BatchSize: 5
            Enabled: true
            MaximumBatchingWindowInSeconds: 0
            ParallelizationFactor: 1
            MaximumRecordAgeInSeconds: 60
            BisectBatchOnFunctionError: false
            MaximumRetryAttempts: 1
            TumblingWindowInSeconds: 0
<<<<<<< HEAD
=======
            
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1

  LambdaKinesisRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
<<<<<<< HEAD
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
=======
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
              - "sts:AssumeRole"
      MaxSessionDuration: 3600
      Description: "Allows Lambda functions to access Kinesis stream for messaging demo"
      Policies:
        - PolicyName: !Sub ${DemoName}-AppInstanceAdmin-ModeratorBot
<<<<<<< HEAD
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "chime:GetMessagingSessionEndpoint"
                Resource: "*"
              - Effect: Allow
                Action:
=======
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action: 
                  - "chime:GetMessagingSessionEndpoint"
                Resource: "*"
              - Effect: Allow
                Action: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
                  - "sts:TagSession"
                  - "sts:AssumeRole"
                Resource: "*"
              - Effect: Allow
<<<<<<< HEAD
                Action:
=======
                Action: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
                  - "comprehend:detectDominantLanguage"
                  - "comprehend:detectPiiEntities"
                  - "lex:postText"
                  - "translate:translateText"
                  - "kinesis:GetRecords"
                  - "kinesis:GetShardIterator"
                  - "kinesis:DescribeStream"
                  - "kinesis:ListShards"
                  - "kinesis:ListStreams"
<<<<<<< HEAD
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: "Allow"
                Action:
=======
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: "*"
              - Effect: "Allow"
                Action: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
                  - "chime:SendChannelMessage"
                  - "chime:ListChannelMessages"
                  - "chime:CreateChannelMembership"
                  - "chime:ListChannelMemberships"
                  - "chime:DeleteChannelMembership"
                  - "chime:CreateChannelModerator"
                  - "chime:ListChannelModerators"
                  - "chime:DescribeChannelModerator"
                  - "chime:CreateChannel"
                  - "chime:DescribeChannel"
                  - "chime:ListChannels"
                  - "chime:DeleteChannel"
                  - "chime:RedactChannelMessage"
                  - "chime:UpdateChannelMessage"
                  - "chime:Connect"
                  - "chime:ListChannelBans"
                  - "chime:CreateChannelBan"
                  - "chime:DeleteChannelBan"
                  - "chime:ListChannelMembershipsForAppInstanceUser"
                Resource:
<<<<<<< HEAD
                  - !Join [
                      "",
                      [
                        !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn,
                        "/user/*",
                      ],
                    ]
                  - !Join [
                      "",
                      [
                        !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn,
                        "/channel/*",
                      ],
                    ]
=======
                  - !Join ['', [!GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn, '/user/*']] 
                  - !Join ['', [!GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn, '/channel/*']]

>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1

  # Creates an S3 bucket to store chat attachments
  ChatAttachmentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: chatattachments-logs
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - HEAD
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - "*"
            ExposedHeaders:
              - "x-amz-server-side-encryption"
              - "x-amz-request-id"
              - "x-amz-id-2"
            MaxAge: 3000
<<<<<<< HEAD

  LoggingBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  ChatAttachmentsBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
=======
            
  LoggingBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: LogDeliveryWrite  
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256   
            
  ChatAttachmentsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
    Properties:
      Bucket: !Ref ChatAttachmentsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
<<<<<<< HEAD
              - "s3:*"
            Effect: Deny
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref ChatAttachmentsBucket
                - /*
            Condition:
=======
              - 's3:*'
            Effect: Deny
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ChatAttachmentsBucket
                - /*
            Condition: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
              Bool:
                aws:SecureTransport: false
            Principal: "*"
          - Action:
<<<<<<< HEAD
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:DeleteObject"
            Effect: Allow
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref ChatAttachmentsBucket
                - /*
            Principal:
              AWS: !GetAtt CognitoAuthorizedRole.Arn
=======
              - 's3:GetObject'
              - 's3:PutObject'
              - "s3:DeleteObject"
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ChatAttachmentsBucket
                - /*
            Principal: 
              AWS: !GetAtt CognitoAuthorizedRole.Arn
            
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1

  #Creates a role to creates AWS Chime App instance
  LambdaExecuteRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
<<<<<<< HEAD
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
=======
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
      Policies:
        - PolicyName: !Sub ${DemoName}-LambdaCreateLogGroup
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
<<<<<<< HEAD
                  - "chime:CreateAppInstanceUser"
                  - "chime:CreateAppInstance"
                  - "chime:CreateAppInstanceAdmin"
                  - "chime:PutAppInstanceStreamingConfigurations"
=======
                  - 'chime:CreateAppInstanceUser'
                  - 'chime:CreateAppInstance'
                  - 'chime:CreateAppInstanceAdmin'
                  - 'chime:PutAppInstanceStreamingConfigurations'
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
                  - "kinesis:DescribeStream"
                  - "kinesis:DescribeStreamSummary"
                  - "kinesis:GetRecords"
                  - "kinesis:GetShardIterator"
                  - "kinesis:ListShards"
                  - "kinesis:ListStreams"
                  - "kinesis:SubscribeToShard"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "iam:CreateServiceLinkedRole"
                  - "iam:AttachRolePolicy"
                  - "iam:CreateRole"
                  - "iam:PutRolePolicy"
<<<<<<< HEAD
                Resource: "*"

=======
                Resource: '*'
  
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
  #Creates a role to allow SignIn Lambda to execute
  LambdaSignInRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
<<<<<<< HEAD
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
=======
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
      Policies:
        - PolicyName: !Sub ${DemoName}-LambdaCreateLogGroup
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
<<<<<<< HEAD
                  - "chime:CreateAppInstanceUser"
                Resource:
                  - !Join [
                      "",
                      [
                        !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn,
                        "/*",
                      ],
                    ]
=======
                  - 'chime:CreateAppInstanceUser'
                Resource:
                  - !Join ['', [!GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn, '/*']]
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
<<<<<<< HEAD
                Resource: "*"
=======
                Resource: '*'
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1

  #Create Lambda used by Cognito Post Authentication Trigger to Create Chime App Instance user if user does not already exist
  SignInHookLambda:
    Type: AWS::Serverless::Function
<<<<<<< HEAD
    DependsOn:
=======
    DependsOn: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
      - TriggerChimeAppInstanceLambda
    Properties:
      FunctionName: !Sub ${DemoName}-SignInHook
      Handler: "index.handler"
      Runtime: nodejs12.x
      CodeUri: signinhook/
      MemorySize: 512
      Role: !GetAtt LambdaSignInRole.Arn
      ReservedConcurrentExecutions: 30
<<<<<<< HEAD
      Layers:
        - !Ref AWSSDKChimeLayer
      Timeout: 800
      Environment:
        Variables:
          CHIME_APP_INSTANCE_ARN: !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn
=======
      Layers: 
          - !Ref AWSSDKChimeLayer
      Timeout: 800
      Environment:
        Variables:
          CHIME_APP_INSTANCE_ARN: !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1

  # Allows Sign In Lambda to be called by Cognito
  LambdaInvocationPermission:
    Type: AWS::Lambda::Permission
<<<<<<< HEAD
    Properties:
=======
    Properties: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SignInHookLambda.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

<<<<<<< HEAD
  # Creates a Cognito User Pool with a Post Authentication Trigger of the Sign In Lambda
  UserPool:
    Type: "AWS::Cognito::UserPool"
    DependsOn:
      - SignInHookLambda
    Properties:
      UserPoolName: !Sub ${DemoName}-user-pool
      LambdaConfig:
=======
  # Creates a Cognito User Pool with a Post Authentication Trigger of the Sign In Lambda      
  UserPool:
    Type: "AWS::Cognito::UserPool"
    DependsOn: 
      - SignInHookLambda
    Properties:
      UserPoolName: !Sub ${DemoName}-user-pool
      LambdaConfig: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
        PostAuthentication: !GetAtt SignInHookLambda.Arn
      UserPoolAddOns:
        AdvancedSecurityMode: ENFORCED
      AutoVerifiedAttributes:
        - email

  # Creates a User Pool Client to be used by the identity pool
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Sub ${DemoName}-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool

  #Creates a federeated Identity pool
  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Sub ${DemoName}-IdentityPool
      AllowUnauthenticatedIdentities: true
<<<<<<< HEAD
      CognitoIdentityProviders:
=======
      CognitoIdentityProviders: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # Create a role for unauthorized acces to AWS resources. Very limited access. Only allows users in the previously created Identity Pool
  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
<<<<<<< HEAD
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
=======
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: !Sub ${DemoName}-CognitoUnauthorizedPolicy
<<<<<<< HEAD
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
=======
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
              - Effect: "Allow"
                Action:
                  - "cognito-sync:Get*"
                Resource:
<<<<<<< HEAD
                  - !Join [
                      "",
                      [
                        "arn:aws:cognito-sync:us-east-1:",
                        !Ref AWS::AccountId,
                        ":identitypool/${cognito-identity.amazonaws.com:aud}/identity/${cognito-identity.amazonaws.com:sub}/*",
                      ],
                    ]

  # Create a role for authorized acces to AWS resources. Control what your user can access.
  # Allows users to access their s3 ChatBucket files
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
=======
                  - !Join ['', ['arn:aws:cognito-sync:us-east-1:', !Ref AWS::AccountId, ':identitypool/${cognito-identity.amazonaws.com:aud}/identity/${cognito-identity.amazonaws.com:sub}/*']]

  # Create a role for authorized acces to AWS resources. Control what your user can access. 
  # Allows users to access their s3 ChatBucket files 
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: !Sub ${DemoName}-CognitoAuthorizedPolicy
<<<<<<< HEAD
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
=======
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
              - Effect: "Allow"
                Action:
                  - "cognito-sync:Get*"
                  - "cognito-identity:Get*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
        - PolicyName: !Sub ${DemoName}-AttachmentsS3PermissionPolicy
<<<<<<< HEAD
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
=======
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
<<<<<<< HEAD
                Resource:
                  !Join [
                    "",
                    [
                      "arn:aws:s3:::",
                      !Ref ChatAttachmentsBucket,
                      "/protected/${cognito-identity.amazonaws.com:sub}/*",
                    ],
                  ]
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource:
                  !Join [
                    "",
                    [
                      "arn:aws:s3:::",
                      !Ref ChatAttachmentsBucket,
                      "/protected/*",
                    ],
                  ]
        - PolicyName: !Sub ${DemoName}-ChimeSDKDemoUserPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
=======
                Resource: !Join ['', ['arn:aws:s3:::', !Ref ChatAttachmentsBucket, '/protected/${cognito-identity.amazonaws.com:sub}/*']]
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource: !Join ['', ['arn:aws:s3:::', !Ref ChatAttachmentsBucket, '/protected/*']]       
        - PolicyName: !Sub ${DemoName}-ChimeSDKDemoUserPolicy
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
              - Effect: "Allow"
                Action:
                  - "chime:GetMessagingSessionEndpoint"
                  - "comprehendmedical:InferICD10CM"
                  - "comprehendmedical:DetectEntitiesV2"
                  - "comprehendmedical:InferRxNorm"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "cognito-idp:ListUsers"
<<<<<<< HEAD
                Resource:
                  !Join [
                    "",
                    [
                      "arn:aws:cognito-idp:us-east-1:",
                      !Ref AWS::AccountId,
                      ":userpool/",
                      !Ref UserPool,
                    ],
                  ]
=======
                Resource: !Join ['', ['arn:aws:cognito-idp:us-east-1:', !Ref AWS::AccountId, ':userpool/', !Ref UserPool]]
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
              - Effect: "Allow"
                Action:
                  - "chime:SendChannelMessage"
                  - "chime:ListChannelMessages"
                  - "chime:CreateChannelMembership"
                  - "chime:ListChannelMemberships"
                  - "chime:DeleteChannelMembership"
                  - "chime:CreateChannelModerator"
                  - "chime:ListChannelModerators"
                  - "chime:DescribeChannelModerator"
                  - "chime:CreateChannel"
                  - "chime:DescribeChannel"
                  - "chime:ListChannels"
                  - "chime:UpdateChannel"
                  - "chime:DeleteChannel"
                  - "chime:RedactChannelMessage"
                  - "chime:UpdateChannelMessage"
                  - "chime:Connect"
<<<<<<< HEAD
                  - "chime:ListChannelMembershipsForAppInstanceUser"
=======
                  - "chime:ListChannelMembershipsForAppInstanceUser" 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
                  - "chime:CreateChannelBan"
                  - "chime:ListChannelBans"
                  - "chime:DeleteChannelBan"
                Resource:
<<<<<<< HEAD
                  - !Join [
                      "",
                      [
                        !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn,
                        "/user/*",
                      ],
                    ]
                  - !Join [
                      "",
                      [
                        !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn,
                        "/channel/*",
                      ],
                    ]
=======
                  - !Join ['', [!GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn, '/user/*']]
                  - !Join ['', [!GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn, '/channel/*']]
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1

  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn

  #############################################################
  ###
  ### RESOURCES FOR CREDENTIAL EXCHANGE SERVICE
  ###
  AuthLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub ${DemoName}-AuthLambdaLogPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
<<<<<<< HEAD
                Resource: "*"
=======
                Resource: '*'
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
        - PolicyName: !Sub ${DemoName}-AuthLambdaChimePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "chime:CreateAppInstanceUser"
                  - "chime:CreateAppInstanceAdmin"
                  - "chime:DescribeAppInstanceUser"
                  - "chime:DescribeAppInstanceAdmin"
                Resource:
<<<<<<< HEAD
                  - !Join [
                      "",
                      [
                        !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn,
                        "/user/*",
                      ],
                    ]
=======
                  - !Join ['', [!GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn, '/user/*']]
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
        - PolicyName: !Sub ${DemoName}-MeetingLambdaChimePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "chime:describeChannel"
                  - "chime:describeChannelMembership"
                  - "chime:createMeeting"
                  - "chime:createAttendee"
                  - "chime:deleteMeeting"
                  - "chime:getMeeting"
                  - "chime:listAttendees"
                  - "chime:createMediaCapturePipeline"
                  - "chime:deleteMediaCapturePipeline"
                  - "chime:startMeetingTranscription"
<<<<<<< HEAD
                Resource:
                  - !Join [
                      "",
                      [
                        !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn,
                        "/user/*",
                      ],
                    ]
                  - !Join [
                      "",
                      [
                        !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn,
                        "/channel/*",
                      ],
                    ]
                  - !Join [
                      "",
                      [
                        !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn,
                        "/meeting/*",
                      ],
                    ]
=======
                Resource: 
                  - !Join ['', [!GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn, '/user/*']]
                  - !Join ['', [!GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn, '/channel/*']]
                  - !Join ['', [!GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn, '/meeting/*']]
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
        - PolicyName: !Sub ${DemoName}-MediaCaptureS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject*
                  - s3:GetBucket*
                  - s3:List*
                  - s3:DeleteObject*
                  - s3:PutObject
                  - s3:Abort*
                Resource:
                  - !GetAtt MediaCaptureBucket.Arn
                  - !Join
<<<<<<< HEAD
                    - ""
                    - - !GetAtt MediaCaptureBucket.Arn
                      - /*

=======
                      - ""
                      - - !GetAtt MediaCaptureBucket.Arn
                        - /*
                        
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
  AuthLambdaUserRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
              - "sts:TagSession"
      Policies:
        - PolicyName: !Sub ${DemoName}-CognitoAuthorizedPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
        - PolicyName: !Sub ${DemoName}-ChimeSDKDemoUserPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "chime:GetMessagingSessionEndpoint"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "chime:CreateChannelMembership"
                  - "chime:ListChannelMemberships"
                  - "chime:DeleteChannelMembership"
                  - "chime:CreateChannelModerator"
                  - "chime:ListChannelModerators"
                  - "chime:DescribeChannelModerator"
                  - "chime:ListAppInstanceUsers"
                  - "chime:DescribeAppInstanceUser"
                  - "chime:ListChannelMembershipsForAppInstanceUser"
                Resource:
<<<<<<< HEAD
                  - !Join [
                      "",
                      [
                        !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn,
                        "/user/*",
                      ],
                    ]
                  - !Join [
                      "",
                      [
                        !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn,
                        "/channel/*",
                      ],
                    ]

=======
                  - !Join ['', [!GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn, '/user/*']]
                  - !Join ['', [!GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn, '/channel/*']]
              
  
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
  AuthLambdaAnonUserRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
              - "sts:TagSession"
      Policies:
        - PolicyName: !Sub ${DemoName}-CognitoAuthorizedPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
        - PolicyName: !Sub ${DemoName}-ChimeSDKDemoUserPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "chime:GetMessagingSessionEndpoint"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "chime:SendChannelMessage"
                  - "chime:GetChannelMessage"
                  - "chime:ListChannelMessages"
                  - "chime:CreateChannelMembership"
                  - "chime:ListChannelMemberships"
                  - "chime:DeleteChannelMembership"
                  - "chime:CreateChannelModerator"
                  - "chime:ListChannelModerators"
                  - "chime:DescribeChannelModerator"
                  - "chime:CreateChannel"
                  - "chime:DescribeChannel"
                  - "chime:ListChannels"
                  - "chime:UpdateChannel"
                  - "chime:DeleteChannel"
                  - "chime:RedactChannelMessage"
                  - "chime:UpdateChannelMessage"
                  - "chime:Connect"
                  - "chime:ListChannelMembershipsForAppInstanceUser"
                  - "chime:CreateChannelBan"
                  - "chime:ListChannelBans"
                  - "chime:DeleteChannelBan"
                Resource:
<<<<<<< HEAD
                  - !Join [
                      "",
                      [
                        !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn,
                        "/user/${aws:PrincipalTag/UserUUID}",
                      ],
                    ]
                  - !Join [
                      "",
                      [
                        !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn,
                        "/channel/*",
                      ],
                    ]
=======
                  - !Join ['', [!GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn, '/user/${aws:PrincipalTag/UserUUID}']]
                  - !Join ['', [!GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn, '/channel/*']]
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
                  - !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn
              - Effect: "Allow"
                Action:
                  - "chime:ListAppInstanceUsers"
                  - "chime:DescribeAppInstanceUser"
                Resource:
<<<<<<< HEAD
                  - !Join [
                      "",
                      [
                        !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn,
                        "/user/*",
                      ],
                    ]

  APIGatewayLogRole:
    Type: "AWS::IAM::Role"
=======
                  - !Join ['', [!GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn, '/user/*']]
  
  APIGatewayLogRole:
    Type: 'AWS::IAM::Role'
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
<<<<<<< HEAD
            Action: "sts:AssumeRole"
=======
            Action: 'sts:AssumeRole'
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

<<<<<<< HEAD
  APIAccountLogRole:
    Type: "AWS::ApiGateway::Account"
=======
  APIAccountLogRole:    
    Type: 'AWS::ApiGateway::Account'
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
    Properties:
      CloudWatchRoleArn: !GetAtt APIGatewayLogRole.Arn

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/chimesdk/${AWS::StackName}-meetingchat-loggroup"
      RetentionInDays: 30
<<<<<<< HEAD

=======
  
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
  ###################
  ## media capture ##
  ###################
  MediaCaptureBucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub chimesdk-mediacapture-bucket-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: mediacapture-logs
<<<<<<< HEAD

=======
        
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
  MediaCaptureBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MediaCaptureBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
<<<<<<< HEAD
              - "s3:*"
            Effect: Deny
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref MediaCaptureBucket
                - /*
            Condition:
=======
              - 's3:*'
            Effect: Deny
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref MediaCaptureBucket
                - /*
            Condition: 
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
              Bool:
                aws:SecureTransport: false
            Principal: "*"
          - Action:
              - s3:PutObject
              - s3:PutObjectAcl
            Effect: Allow
            Principal:
              Service: chime.amazonaws.com
            Resource:
              - !GetAtt MediaCaptureBucket.Arn
              - Fn::Join:
                  - ""
                  - - !GetAtt MediaCaptureBucket.Arn
                    - /*
            Sid: ChimeSDKMediaCaptureBucketPolicy

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      AccessLogSetting:
        DestinationArn: !GetAtt LogGroup.Arn
<<<<<<< HEAD
        Format: '{ "requestId": "$context.requestId", "ip": "$context.identity.sourceIp", "caller": "$context.identity.caller", "requestTime": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "resourcePath": "$context.resourcePath", "status": "$context.status", "protocol": "$context.protocol", "responseLength": "$context.responseLength" }'
=======
        Format: "{ \"requestId\": \"$context.requestId\", \"ip\": \"$context.identity.sourceIp\", \"caller\": \"$context.identity.caller\", \"requestTime\": \"$context.requestTimeEpoch\", \"httpMethod\": \"$context.httpMethod\", \"resourcePath\": \"$context.resourcePath\", \"status\": \"$context.status\", \"protocol\": \"$context.protocol\", \"responseLength\": \"$context.responseLength\" }"
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          LoggingLevel: "INFO"
      Cors:
        AllowMethods: "'POST, OPTIONS'"
        AllowHeaders: "'Authorization'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
<<<<<<< HEAD

=======
  
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
  RequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: APIValidator
      RestApiId: !Ref ApiGatewayApi
      ValidateRequestBody: Yes
      ValidateRequestParameters: Yes
<<<<<<< HEAD

=======
      
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
  CredApiFunction: # Adds a POST api endpoint at "/creds" to the ApiGatewayApi via an Api event
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AuthLambdaIAMRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /creds
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
      Environment:
        Variables:
          ChimeAppInstanceArn: !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn
          UserRoleArn: !GetAtt AuthLambdaUserRole.Arn
          AnonUserRole: !GetAtt AuthLambdaAnonUserRole.Arn
      ReservedConcurrentExecutions: 30
      Layers:
        - !Ref AWSSDKChimeLayer
      Runtime: nodejs12.x
      CodeUri: usercreds/
      Handler: index.handler

  ###
  ### RESOURCES FOR MEETING SERVER
  ###
  CreateMeetingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub ${DemoName}-AuthLambdaLogPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
<<<<<<< HEAD
                Resource: "*"
=======
                Resource: '*'
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
        - PolicyName: !Sub ${DemoName}-AuthLambdaChimePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "chime:CreateAppInstanceUser"
                  - "chime:CreateAppInstanceAdmin"
                  - "chime:DescribeAppInstanceUser"
                  - "chime:DescribeAppInstanceAdmin"
                Resource:
<<<<<<< HEAD
                  - !Join [
                      "",
                      [
                        !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn,
                        "/user/*",
                      ],
                    ]
=======
                  - !Join ['', [!GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn, '/user/*']]
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
        - PolicyName: !Sub ${DemoName}-MeetingLambdaChimePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "chime:describeChannel"
                  - "chime:describeChannelMembership"
                  - "chime:createMeeting"
                  - "chime:createAttendee"
                  - "chime:getMeeting"
                  - "chime:listAttendees"
<<<<<<< HEAD
                Resource: "*"

=======
                Resource: '*'
                  
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
  CreateMeetingApiFunction: # Adds a POST api endpoint at "/create" to create meetings
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CreateMeetingLambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /create
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
      Environment:
        Variables:
          ChimeAppInstanceArn: !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn
      ReservedConcurrentExecutions: 30
      Layers:
        - !Ref AWSSDKChimeLayer
      Runtime: nodejs12.x
      CodeUri: createmeeting/
      Handler: index.handler

<<<<<<< HEAD
=======
  
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
  StartTranscriptionLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
<<<<<<< HEAD
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
=======
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
      Policies:
        - PolicyName: !Sub ${DemoName}-CognitoAuthorizedPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
        - PolicyName: !Sub ${DemoName}-ChimeSDKDemoUserPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "chime:startMeetingTranscription"
                Resource: "*"
<<<<<<< HEAD

=======
                  
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
  StartTranscriptionApiFunction: # Adds a POST api endpoint at "/transcript" to start live transcription
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt StartTranscriptionLambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /transcript
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
      Layers:
        - !Ref AWSSDKChimeLayer
      ReservedConcurrentExecutions: 30
      Runtime: nodejs12.x
      CodeUri: starttranscript/
      Handler: index.handler
<<<<<<< HEAD

=======
  
  
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
  CreateAttendeeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub ${DemoName}-AuthLambdaLogPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
<<<<<<< HEAD
                Resource: "*"
=======
                Resource: '*'
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
        - PolicyName: !Sub ${DemoName}-AuthLambdaChimePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "chime:CreateAppInstanceUser"
                  - "chime:CreateAppInstanceAdmin"
                  - "chime:DescribeAppInstanceUser"
                  - "chime:DescribeAppInstanceAdmin"
                Resource:
<<<<<<< HEAD
                  - !Join [
                      "",
                      [
                        !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn,
                        "/user/*",
                      ],
                    ]
=======
                  - !Join ['', [!GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn, '/user/*']]
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
        - PolicyName: !Sub ${DemoName}-MeetingLambdaChimePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "chime:describeChannel"
                  - "chime:describeChannelMembership"
                  - "chime:createAttendee"
                  - "chime:getMeeting"
                  - "chime:listAttendees"
                Resource: "*"
<<<<<<< HEAD

=======
                  
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
  CreateAttendeeApiFunction: # Adds a POST api endpoint at "/join" to join meetings as an attendee
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CreateAttendeeLambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /join
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
      Environment:
        Variables:
          ChimeAppInstanceArn: !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn
      ReservedConcurrentExecutions: 30
      Layers:
        - !Ref AWSSDKChimeLayer
      Runtime: nodejs12.x
      CodeUri: createattendee/
      Handler: index.handler
<<<<<<< HEAD

=======
  
  
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
  StartRecordingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub ${DemoName}-AuthLambdaLogPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
<<<<<<< HEAD
                Resource: "*"
=======
                Resource: '*'
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
        - PolicyName: !Sub ${DemoName}-AuthLambdaChimePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "chime:CreateAppInstanceUser"
                  - "chime:CreateAppInstanceAdmin"
                  - "chime:DescribeAppInstanceUser"
                  - "chime:DescribeAppInstanceAdmin"
                Resource:
<<<<<<< HEAD
                  - !Join [
                      "",
                      [
                        !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn,
                        "/user/*",
                      ],
                    ]
=======
                  - !Join ['', [!GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn, '/user/*']]
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
        - PolicyName: !Sub ${DemoName}-MeetingLambdaChimePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "chime:createMediaCapturePipeline"
                Resource: "*"
        - PolicyName: !Sub ${DemoName}-MediaCaptureS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject*
                  - s3:GetBucket*
                  - s3:List*
                  - s3:DeleteObject*
                  - s3:PutObject
                  - s3:Abort*
                Resource:
                  - !GetAtt MediaCaptureBucket.Arn
                  - !Join
<<<<<<< HEAD
                    - ""
                    - - !GetAtt MediaCaptureBucket.Arn
                      - /*

=======
                      - ""
                      - - !GetAtt MediaCaptureBucket.Arn
                        - /*
                  
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
  StartMeetingRecordingApiFunction: # Adds a POST api endpoint at "/startrecord" to start meeting recording
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt StartRecordingLambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /startrecord
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
      Environment:
        Variables:
          MEDIA_CAPTURE_BUCKET: !Ref MediaCaptureBucket
          ACCOUNT_ID: !Ref AWS::AccountId
      ReservedConcurrentExecutions: 30
      Layers:
        - !Ref AWSSDKChimeLayer
      Runtime: nodejs12.x
      CodeUri: startrecording/
      Handler: index.handler
<<<<<<< HEAD

=======
  
  
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
  StopRecordingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub ${DemoName}-AuthLambdaLogPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
<<<<<<< HEAD
                Resource: "*"
=======
                Resource: '*'
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
        - PolicyName: !Sub ${DemoName}-AuthLambdaChimePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "chime:CreateAppInstanceUser"
                  - "chime:CreateAppInstanceAdmin"
                  - "chime:DescribeAppInstanceUser"
                  - "chime:DescribeAppInstanceAdmin"
                Resource:
<<<<<<< HEAD
                  - !Join [
                      "",
                      [
                        !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn,
                        "/user/*",
                      ],
                    ]
=======
                  - !Join ['', [!GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn, '/user/*']]
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
        - PolicyName: !Sub ${DemoName}-MeetingLambdaChimePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "chime:deleteMediaCapturePipeline"
                Resource: "*"
<<<<<<< HEAD

=======
                  
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
  StopMeetingRecordingApiFunction: # Adds a POST api endpoint at "/stoprecord" to stop meeting recording
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt StopRecordingLambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /stoprecord
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
      ReservedConcurrentExecutions: 30
      Layers:
        - !Ref AWSSDKChimeLayer
      Runtime: nodejs12.x
      CodeUri: stoprecording/
      Handler: index.handler
<<<<<<< HEAD

=======
        
  
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
  EndMeetingLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
<<<<<<< HEAD
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
=======
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
      Policies:
        - PolicyName: !Sub ${DemoName}-CognitoAuthorizedPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
        - PolicyName: !Sub ${DemoName}-ChimeSDKDemoUserPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "chime:GetMessagingSessionEndpoint"
                  - "chime:DeleteMeeting"
                  - "chime:GetMeeting"
                Resource: "*"
<<<<<<< HEAD

=======
                  
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
  EndMeetingApiFunction: # Adds a POST api endpoint at "/end" to end the meeting
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt EndMeetingLambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /end
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
      ReservedConcurrentExecutions: 30
      Layers:
        - !Ref AWSSDKChimeLayer
      Runtime: nodejs12.x
      CodeUri: endmeeting/
      Handler: index.handler
<<<<<<< HEAD
=======
         
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1

Outputs:
  cognitoUserPoolId:
    Value: !Ref UserPool
  cognitoAppClientId:
    Value: !Ref UserPoolClient
  cognitoIdentityPoolId:
    Value: !Ref IdentityPool
  appInstanceArn:
    Value: !GetAtt TriggerChimeAppInstanceLambda.AppInstanceArn
  attachmentsS3BucketName:
    Value: !Ref ChatAttachmentsBucket
  apiGatewayInvokeUrl:
    Value: !Sub https://${ApiGatewayApi}.execute-api.us-east-1.amazonaws.com/prod/
<<<<<<< HEAD
=======
  
>>>>>>> fd93f5bbb41fc9082758a231d3888d823ddb8cc1
